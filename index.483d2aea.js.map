{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Game.INITIAL_STATE;\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.initialState = initialState;\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = Game.STATUS.idle;\n        this.gameSize = initialState.length;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.move(Game.DIRECTION.left);\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.move(Game.DIRECTION.right);\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.move(Game.DIRECTION.up);\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.move(Game.DIRECTION.down);\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = Game.STATUS.playing;\n                this.addTile();\n                this.addTile();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.state = JSON.parse(JSON.stringify(this.initialState));\n                this.score = 0;\n                this.status = Game.STATUS.idle;\n            }\n        },\n        {\n            key: \"move\",\n            value: function move(direction) {\n                var _this = this;\n                if (this.getStatus() !== Game.STATUS.playing) return;\n                var newState;\n                if (direction === Game.DIRECTION.left) newState = this.state.map(function(row) {\n                    return _this.updateRow(row);\n                });\n                if (direction === Game.DIRECTION.right) newState = this.reverseRows(this.reverseRows(this.state).map(function(row) {\n                    return _this.updateRow(row);\n                }));\n                if (direction === Game.DIRECTION.up) newState = this.columnsToRows(this.columnsToRows(this.state).map(function(row) {\n                    return _this.updateRow(row);\n                }));\n                if (direction === Game.DIRECTION.down) newState = this.columnsToRows(this.reverseRows(this.reverseRows(this.columnsToRows(this.state)).map(function(row) {\n                    return _this.updateRow(row);\n                })));\n                if (this.shouldMove(this.state, newState)) {\n                    this.state = newState;\n                    this.addTile();\n                }\n                this.updateGameStatus();\n            }\n        },\n        {\n            key: \"getEmptyCells\",\n            value: function getEmptyCells() {\n                return this.state.reduce(function(acc, row, rowIndex) {\n                    row.forEach(function(cell, colIndex) {\n                        if (!cell) acc.push({\n                            rowIndex: rowIndex,\n                            colIndex: colIndex\n                        });\n                    });\n                    return acc;\n                }, []);\n            }\n        },\n        {\n            key: \"addTile\",\n            value: function addTile() {\n                var number = Math.random() <= 0.1 ? 4 : 2;\n                var emptyCells = this.getEmptyCells();\n                if (emptyCells.length) {\n                    var emptyCellIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_emptyCellIndex = emptyCells[emptyCellIndex], rowIndex = _emptyCells_emptyCellIndex.rowIndex, colIndex = _emptyCells_emptyCellIndex.colIndex;\n                    this.state[rowIndex][colIndex] = number;\n                }\n            }\n        },\n        {\n            key: \"columnsToRows\",\n            value: function columnsToRows(state) {\n                return state.reduce(function(acc, row) {\n                    row.forEach(function(cell, i) {\n                        if (!acc[i]) acc[i] = [];\n                        acc[i].push(cell);\n                    });\n                    return acc;\n                }, []);\n            }\n        },\n        {\n            key: \"reverseRows\",\n            value: function reverseRows(state) {\n                return state.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row).reverse();\n                });\n            }\n        },\n        {\n            key: \"updateRow\",\n            value: function updateRow(row) {\n                var filteredCells = row.filter(function(cell) {\n                    return cell;\n                });\n                for(var i = 0; i < filteredCells.length - 1; i++){\n                    var currentCell = filteredCells[i];\n                    var nextCell = filteredCells[i + 1];\n                    if (currentCell === nextCell) {\n                        var count = currentCell * 2;\n                        filteredCells[i] = count;\n                        filteredCells.splice(i + 1, 1);\n                        this.score += count;\n                    }\n                }\n                while(filteredCells.length < this.gameSize)filteredCells.push(0);\n                return filteredCells;\n            }\n        },\n        {\n            key: \"canMoveRow\",\n            value: function canMoveRow(row) {\n                return row.some(function(cell, index) {\n                    return cell === row[index + 1];\n                });\n            }\n        },\n        {\n            key: \"shouldMove\",\n            value: function shouldMove(currentState, newState) {\n                return newState.some(function(row, rowIndex) {\n                    return row.some(function(cell, colIndex) {\n                        return cell !== currentState[rowIndex][colIndex];\n                    });\n                });\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                var _this = this;\n                return this.state.some(function(row) {\n                    return _this.canMoveRow(row);\n                }) || this.columnsToRows(this.state).some(function(row) {\n                    return _this.canMoveRow(row);\n                });\n            }\n        },\n        {\n            key: \"updateGameStatus\",\n            value: function updateGameStatus() {\n                var isWinGame = this.state.some(function(row) {\n                    return row.includes(Game.WIN_COUNT);\n                });\n                if (isWinGame) this.status = Game.STATUS.win;\n                if (!this.canMove()) this.status = Game.STATUS.lose;\n            }\n        }\n    ]);\n    return Game;\n}();\n/**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"STATUS\", {\n    idle: \"idle\",\n    playing: \"playing\",\n    win: \"win\",\n    lose: \"lose\"\n});\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"DIRECTION\", {\n    left: \"left\",\n    right: \"right\",\n    up: \"up\",\n    down: \"down\"\n});\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"INITIAL_STATE\", [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"WIN_COUNT\", 2048);\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports)))();\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$board = document.querySelector(\"tbody\");\nvar $197cd56b15c33885$var$startMessage = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$loseMessage = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$winMessage = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$gameScore = document.querySelector(\".game-score\");\nfunction $197cd56b15c33885$var$handleGame() {\n    if ($197cd56b15c33885$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).STATUS.idle) {\n        document.addEventListener(\"keydown\", $197cd56b15c33885$var$onMove);\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n        $197cd56b15c33885$var$game.start();\n    } else {\n        $197cd56b15c33885$var$button.textContent = \"Start\";\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$stopGame();\n    }\n    $197cd56b15c33885$var$button.classList.toggle(\"restart\");\n    $197cd56b15c33885$var$button.classList.toggle(\"start\");\n    $197cd56b15c33885$var$renderBoard();\n    $197cd56b15c33885$var$manageMessage();\n}\nfunction $197cd56b15c33885$var$stopGame() {\n    document.removeEventListener(\"keydown\", $197cd56b15c33885$var$onMove);\n}\nfunction $197cd56b15c33885$var$onMove(e) {\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        default:\n            break;\n    }\n    $197cd56b15c33885$var$renderBoard();\n    if ([\n        (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).STATUS.win,\n        (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).STATUS.lose\n    ].includes($197cd56b15c33885$var$game.getStatus())) {\n        $197cd56b15c33885$var$stopGame();\n        $197cd56b15c33885$var$manageMessage();\n    }\n}\nfunction $197cd56b15c33885$var$renderBoard() {\n    $197cd56b15c33885$var$game.state.forEach(function(line, index) {\n        var tr = document.createElement(\"tr\");\n        tr.classList.add(\"field-row\");\n        line.forEach(function(item) {\n            var td = document.createElement(\"td\");\n            td.classList.add(\"field-cell\");\n            if (item) td.classList.add(\"field-cell--\".concat(item));\n            td.textContent = item || \"\";\n            tr.appendChild(td);\n        });\n        $197cd56b15c33885$var$board.replaceChild(tr, $197cd56b15c33885$var$board.rows[index]);\n    });\n    $197cd56b15c33885$var$gameScore.textContent = $197cd56b15c33885$var$game.getScore().toString();\n}\nfunction $197cd56b15c33885$var$manageMessage() {\n    switch($197cd56b15c33885$var$game.getStatus()){\n        case (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).STATUS.idle:\n            $197cd56b15c33885$var$startMessage.classList.remove(\"hidden\");\n            $197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\n            $197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n            break;\n        case (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).STATUS.playing:\n            $197cd56b15c33885$var$startMessage.classList.add(\"hidden\");\n            break;\n        case (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).STATUS.win:\n            $197cd56b15c33885$var$winMessage.classList.remove(\"hidden\");\n            break;\n        case (0, (/*@__PURE__*/$parcel$interopDefault($3d28d7f1aac198f5$exports))).STATUS.lose:\n            $197cd56b15c33885$var$loseMessage.classList.remove(\"hidden\");\n            break;\n        default:\n            break;\n    }\n}\n$197cd56b15c33885$var$button.addEventListener(\"click\", $197cd56b15c33885$var$handleGame);\n\n})();\n//# sourceMappingURL=index.483d2aea.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst board = document.querySelector('tbody');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nfunction handleGame() {\n  if (game.getStatus() === Game.STATUS.idle) {\n    document.addEventListener('keydown', onMove);\n    button.textContent = 'Restart';\n    game.start();\n  } else {\n    button.textContent = 'Start';\n    game.restart();\n    stopGame();\n  }\n\n  button.classList.toggle('restart');\n  button.classList.toggle('start');\n\n  renderBoard();\n  manageMessage();\n}\n\nfunction stopGame() {\n  document.removeEventListener('keydown', onMove);\n}\n\nfunction onMove(e) {\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      break;\n  }\n\n  renderBoard();\n\n  if ([Game.STATUS.win, Game.STATUS.lose].includes(game.getStatus())) {\n    stopGame();\n    manageMessage();\n  }\n}\n\nfunction renderBoard() {\n  game.state.forEach((line, index) => {\n    const tr = document.createElement('tr');\n\n    tr.classList.add('field-row');\n\n    line.forEach((item) => {\n      const td = document.createElement('td');\n\n      td.classList.add('field-cell');\n\n      if (item) {\n        td.classList.add(`field-cell--${item}`);\n      }\n\n      td.textContent = item || '';\n\n      tr.appendChild(td);\n    });\n\n    board.replaceChild(tr, board.rows[index]);\n  });\n\n  gameScore.textContent = game.getScore().toString();\n}\n\nfunction manageMessage() {\n  switch (game.getStatus()) {\n    case Game.STATUS.idle:\n      startMessage.classList.remove('hidden');\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n      break;\n    case Game.STATUS.playing:\n      startMessage.classList.add('hidden');\n      break;\n    case Game.STATUS.win:\n      winMessage.classList.remove('hidden');\n      break;\n    case Game.STATUS.lose:\n      loseMessage.classList.remove('hidden');\n      break;\n    default:\n      break;\n  }\n}\n\nbutton.addEventListener('click', handleGame);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  static STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  static DIRECTION = {\n    left: 'left',\n    right: 'right',\n    up: 'up',\n    down: 'down',\n  };\n\n  static INITIAL_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  static WIN_COUNT = 2048;\n\n  constructor(initialState = Game.INITIAL_STATE) {\n    this.initialState = initialState;\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = Game.STATUS.idle;\n    this.gameSize = initialState.length;\n  }\n\n  moveLeft() {\n    this.move(Game.DIRECTION.left);\n  }\n  moveRight() {\n    this.move(Game.DIRECTION.right);\n  }\n  moveUp() {\n    this.move(Game.DIRECTION.up);\n  }\n  moveDown() {\n    this.move(Game.DIRECTION.down);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = Game.STATUS.playing;\n    this.addTile();\n    this.addTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = Game.STATUS.idle;\n  }\n\n  move(direction) {\n    if (this.getStatus() !== Game.STATUS.playing) {\n      return;\n    }\n\n    let newState;\n\n    if (direction === Game.DIRECTION.left) {\n      newState = this.state.map((row) => this.updateRow(row));\n    }\n\n    if (direction === Game.DIRECTION.right) {\n      newState = this.reverseRows(\n        this.reverseRows(this.state).map((row) => {\n          return this.updateRow(row);\n        }),\n      );\n    }\n\n    if (direction === Game.DIRECTION.up) {\n      newState = this.columnsToRows(\n        this.columnsToRows(this.state).map((row) => {\n          return this.updateRow(row);\n        }),\n      );\n    }\n\n    if (direction === Game.DIRECTION.down) {\n      newState = this.columnsToRows(\n        this.reverseRows(\n          this.reverseRows(this.columnsToRows(this.state)).map((row) => {\n            return this.updateRow(row);\n          }),\n        ),\n      );\n    }\n\n    if (this.shouldMove(this.state, newState)) {\n      this.state = newState;\n      this.addTile();\n    }\n\n    this.updateGameStatus();\n  }\n\n  getEmptyCells() {\n    return this.state.reduce((acc, row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (!cell) {\n          acc.push({ rowIndex, colIndex });\n        }\n      });\n\n      return acc;\n    }, []);\n  }\n\n  addTile() {\n    const number = Math.random() <= 0.1 ? 4 : 2;\n\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length) {\n      const emptyCellIndex = Math.floor(Math.random() * emptyCells.length);\n\n      const { rowIndex, colIndex } = emptyCells[emptyCellIndex];\n\n      this.state[rowIndex][colIndex] = number;\n    }\n  }\n\n  columnsToRows(state) {\n    return state.reduce((acc, row) => {\n      row.forEach((cell, i) => {\n        if (!acc[i]) {\n          acc[i] = [];\n        }\n\n        acc[i].push(cell);\n      });\n\n      return acc;\n    }, []);\n  }\n\n  reverseRows(state) {\n    return state.map((row) => [...row].reverse());\n  }\n\n  updateRow(row) {\n    const filteredCells = row.filter((cell) => cell);\n\n    for (let i = 0; i < filteredCells.length - 1; i++) {\n      const currentCell = filteredCells[i];\n      const nextCell = filteredCells[i + 1];\n\n      if (currentCell === nextCell) {\n        const count = currentCell * 2;\n\n        filteredCells[i] = count;\n        filteredCells.splice(i + 1, 1);\n        this.score += count;\n      }\n    }\n\n    while (filteredCells.length < this.gameSize) {\n      filteredCells.push(0);\n    }\n\n    return filteredCells;\n  }\n\n  canMoveRow(row) {\n    return row.some((cell, index) => cell === row[index + 1]);\n  }\n\n  shouldMove(currentState, newState) {\n    return newState.some((row, rowIndex) => {\n      return row.some((cell, colIndex) => {\n        return cell !== currentState[rowIndex][colIndex];\n      });\n    });\n  }\n\n  canMove() {\n    return (\n      this.state.some((row) => this.canMoveRow(row)) ||\n      this.columnsToRows(this.state).some((row) => this.canMoveRow(row))\n    );\n  }\n\n  updateGameStatus() {\n    const isWinGame = this.state.some((row) => row.includes(Game.WIN_COUNT));\n\n    if (isWinGame) {\n      this.status = Game.STATUS.win;\n    }\n\n    if (!this.canMove()) {\n      this.status = Game.STATUS.lose;\n    }\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$parcel$interopDefault","a","__esModule","default","$3d28d7f1aac198f5$exports","$cd5a47cf8ef6d766$export$1e71eb4bef00f6b0","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","arguments","INITIAL_STATE","instance","Constructor","TypeError","state","JSON","parse","stringify","score","status","STATUS","idle","gameSize","move","DIRECTION","left","right","up","down","playing","addTile","direction","newState","_this","getStatus","map","row","updateRow","reverseRows","columnsToRows","shouldMove","updateGameStatus","reduce","acc","rowIndex","forEach","cell","colIndex","push","emptyCells","getEmptyCells","emptyCellIndex","Math","floor","random","_emptyCells_emptyCellIndex","isArray","iter","Symbol","iterator","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","reverse","filteredCells","filter","currentCell","count","splice","some","index","currentState","canMoveRow","includes","WIN_COUNT","win","canMove","lose","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","$197cd56b15c33885$var$game","$197cd56b15c33885$var$button","document","querySelector","$197cd56b15c33885$var$board","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$gameScore","$197cd56b15c33885$var$stopGame","removeEventListener","$197cd56b15c33885$var$onMove","e","preventDefault","moveLeft","moveRight","moveUp","moveDown","$197cd56b15c33885$var$renderBoard","$197cd56b15c33885$var$manageMessage","line","tr","createElement","classList","add","item","td","concat","textContent","appendChild","replaceChild","rows","getScore","remove","addEventListener","start","restart","toggle"],"version":3,"file":"index.483d2aea.js.map"}