{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ static STATUS = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    static DIRECTION = {\n        left: \"left\",\n        right: \"right\",\n        up: \"up\",\n        down: \"down\"\n    };\n    static INITIAL_STATE = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    static WIN_COUNT = 2048;\n    constructor(initialState = $a5fd07fa01589658$var$Game.INITIAL_STATE){\n        this.initialState = initialState;\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.gameSize = initialState.length;\n    }\n    moveLeft() {\n        this.move($a5fd07fa01589658$var$Game.DIRECTION.left);\n    }\n    moveRight() {\n        this.move($a5fd07fa01589658$var$Game.DIRECTION.right);\n    }\n    moveUp() {\n        this.move($a5fd07fa01589658$var$Game.DIRECTION.up);\n    }\n    moveDown() {\n        this.move($a5fd07fa01589658$var$Game.DIRECTION.down);\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.playing;\n        this.addTile();\n        this.addTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n    }\n    move(direction) {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        let newState;\n        if (direction === $a5fd07fa01589658$var$Game.DIRECTION.left) newState = this.state.map((row)=>this.updateRow(row));\n        if (direction === $a5fd07fa01589658$var$Game.DIRECTION.right) newState = this.reverseRows(this.reverseRows(this.state).map((row)=>{\n            return this.updateRow(row);\n        }));\n        if (direction === $a5fd07fa01589658$var$Game.DIRECTION.up) newState = this.columnsToRows(this.columnsToRows(this.state).map((row)=>{\n            return this.updateRow(row);\n        }));\n        if (direction === $a5fd07fa01589658$var$Game.DIRECTION.down) newState = this.columnsToRows(this.reverseRows(this.reverseRows(this.columnsToRows(this.state)).map((row)=>{\n            return this.updateRow(row);\n        })));\n        if (this.shouldMove(this.state, newState)) {\n            this.state = newState;\n            this.addTile();\n        }\n        this.updateGameStatus();\n    }\n    getEmptyCells() {\n        return this.state.reduce((acc, row, rowIndex)=>{\n            row.forEach((cell, colIndex)=>{\n                if (!cell) acc.push({\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            });\n            return acc;\n        }, []);\n    }\n    addTile() {\n        const number = Math.random() <= 0.1 ? 4 : 2;\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length) {\n            const emptyCellIndex = Math.floor(Math.random() * emptyCells.length);\n            const { rowIndex: rowIndex, colIndex: colIndex } = emptyCells[emptyCellIndex];\n            this.state[rowIndex][colIndex] = number;\n        }\n    }\n    columnsToRows(state) {\n        return state.reduce((acc, row)=>{\n            row.forEach((cell, i)=>{\n                if (!acc[i]) acc[i] = [];\n                acc[i].push(cell);\n            });\n            return acc;\n        }, []);\n    }\n    reverseRows(state) {\n        return state.map((row)=>[\n                ...row\n            ].reverse());\n    }\n    updateRow(row) {\n        const filteredCells = row.filter((cell)=>cell);\n        for(let i = 0; i < filteredCells.length - 1; i++){\n            const currentCell = filteredCells[i];\n            const nextCell = filteredCells[i + 1];\n            if (currentCell === nextCell) {\n                const count = currentCell * 2;\n                filteredCells[i] = count;\n                filteredCells.splice(i + 1, 1);\n                this.score += count;\n            }\n        }\n        while(filteredCells.length < this.gameSize)filteredCells.push(0);\n        return filteredCells;\n    }\n    canMoveRow(row) {\n        return row.some((cell, index)=>cell === row[index + 1]);\n    }\n    shouldMove(currentState, newState) {\n        return newState.some((row, rowIndex)=>{\n            return row.some((cell, colIndex)=>{\n                return cell !== currentState[rowIndex][colIndex];\n            });\n        });\n    }\n    canMove() {\n        return this.state.some((row)=>this.canMoveRow(row)) || this.columnsToRows(this.state).some((row)=>this.canMoveRow(row));\n    }\n    updateGameStatus() {\n        const isWinGame = this.state.some((row)=>row.includes($a5fd07fa01589658$var$Game.WIN_COUNT));\n        if (isWinGame) this.status = $a5fd07fa01589658$var$Game.STATUS.win;\n        if (!this.canMove()) this.status = $a5fd07fa01589658$var$Game.STATUS.lose;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$board = document.querySelector(\"tbody\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nfunction $09e991522ca7e64e$var$handleGame() {\n    if ($09e991522ca7e64e$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.idle) {\n        document.addEventListener(\"keydown\", $09e991522ca7e64e$var$onMove);\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$game.start();\n    } else {\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$stopGame();\n    }\n    $09e991522ca7e64e$var$button.classList.toggle(\"restart\");\n    $09e991522ca7e64e$var$button.classList.toggle(\"start\");\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$manageMessage();\n}\nfunction $09e991522ca7e64e$var$stopGame() {\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$onMove);\n}\nfunction $09e991522ca7e64e$var$onMove(e) {\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$renderBoard();\n    if ([\n        (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.win,\n        (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.lose\n    ].includes($09e991522ca7e64e$var$game.getStatus())) {\n        $09e991522ca7e64e$var$stopGame();\n        $09e991522ca7e64e$var$manageMessage();\n    }\n}\nfunction $09e991522ca7e64e$var$renderBoard() {\n    $09e991522ca7e64e$var$game.state.forEach((line, index)=>{\n        const tr = document.createElement(\"tr\");\n        tr.classList.add(\"field-row\");\n        line.forEach((item)=>{\n            const td = document.createElement(\"td\");\n            td.classList.add(\"field-cell\");\n            if (item) td.classList.add(`field-cell--${item}`);\n            td.textContent = item || \"\";\n            tr.appendChild(td);\n        });\n        $09e991522ca7e64e$var$board.replaceChild(tr, $09e991522ca7e64e$var$board.rows[index]);\n    });\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore().toString();\n}\nfunction $09e991522ca7e64e$var$manageMessage() {\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.idle:\n            $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n            break;\n        case (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.playing:\n            $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n            break;\n        case (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.win:\n            $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n            break;\n        case (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.lose:\n            $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n            break;\n        default:\n            break;\n    }\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$handleGame);\n\n\n//# sourceMappingURL=index.8dbf3569.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst board = document.querySelector('tbody');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nfunction handleGame() {\n  if (game.getStatus() === Game.STATUS.idle) {\n    document.addEventListener('keydown', onMove);\n    button.textContent = 'Restart';\n    game.start();\n  } else {\n    button.textContent = 'Start';\n    game.restart();\n    stopGame();\n  }\n\n  button.classList.toggle('restart');\n  button.classList.toggle('start');\n\n  renderBoard();\n  manageMessage();\n}\n\nfunction stopGame() {\n  document.removeEventListener('keydown', onMove);\n}\n\nfunction onMove(e) {\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      break;\n  }\n\n  renderBoard();\n\n  if ([Game.STATUS.win, Game.STATUS.lose].includes(game.getStatus())) {\n    stopGame();\n    manageMessage();\n  }\n}\n\nfunction renderBoard() {\n  game.state.forEach((line, index) => {\n    const tr = document.createElement('tr');\n\n    tr.classList.add('field-row');\n\n    line.forEach((item) => {\n      const td = document.createElement('td');\n\n      td.classList.add('field-cell');\n\n      if (item) {\n        td.classList.add(`field-cell--${item}`);\n      }\n\n      td.textContent = item || '';\n\n      tr.appendChild(td);\n    });\n\n    board.replaceChild(tr, board.rows[index]);\n  });\n\n  gameScore.textContent = game.getScore().toString();\n}\n\nfunction manageMessage() {\n  switch (game.getStatus()) {\n    case Game.STATUS.idle:\n      startMessage.classList.remove('hidden');\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n      break;\n    case Game.STATUS.playing:\n      startMessage.classList.add('hidden');\n      break;\n    case Game.STATUS.win:\n      winMessage.classList.remove('hidden');\n      break;\n    case Game.STATUS.lose:\n      loseMessage.classList.remove('hidden');\n      break;\n    default:\n      break;\n  }\n}\n\nbutton.addEventListener('click', handleGame);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  static STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  static DIRECTION = {\n    left: 'left',\n    right: 'right',\n    up: 'up',\n    down: 'down',\n  };\n\n  static INITIAL_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  static WIN_COUNT = 2048;\n\n  constructor(initialState = Game.INITIAL_STATE) {\n    this.initialState = initialState;\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = Game.STATUS.idle;\n    this.gameSize = initialState.length;\n  }\n\n  moveLeft() {\n    this.move(Game.DIRECTION.left);\n  }\n  moveRight() {\n    this.move(Game.DIRECTION.right);\n  }\n  moveUp() {\n    this.move(Game.DIRECTION.up);\n  }\n  moveDown() {\n    this.move(Game.DIRECTION.down);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = Game.STATUS.playing;\n    this.addTile();\n    this.addTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = Game.STATUS.idle;\n  }\n\n  move(direction) {\n    if (this.getStatus() !== Game.STATUS.playing) {\n      return;\n    }\n\n    let newState;\n\n    if (direction === Game.DIRECTION.left) {\n      newState = this.state.map((row) => this.updateRow(row));\n    }\n\n    if (direction === Game.DIRECTION.right) {\n      newState = this.reverseRows(\n        this.reverseRows(this.state).map((row) => {\n          return this.updateRow(row);\n        }),\n      );\n    }\n\n    if (direction === Game.DIRECTION.up) {\n      newState = this.columnsToRows(\n        this.columnsToRows(this.state).map((row) => {\n          return this.updateRow(row);\n        }),\n      );\n    }\n\n    if (direction === Game.DIRECTION.down) {\n      newState = this.columnsToRows(\n        this.reverseRows(\n          this.reverseRows(this.columnsToRows(this.state)).map((row) => {\n            return this.updateRow(row);\n          }),\n        ),\n      );\n    }\n\n    if (this.shouldMove(this.state, newState)) {\n      this.state = newState;\n      this.addTile();\n    }\n\n    this.updateGameStatus();\n  }\n\n  getEmptyCells() {\n    return this.state.reduce((acc, row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (!cell) {\n          acc.push({ rowIndex, colIndex });\n        }\n      });\n\n      return acc;\n    }, []);\n  }\n\n  addTile() {\n    const number = Math.random() <= 0.1 ? 4 : 2;\n\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length) {\n      const emptyCellIndex = Math.floor(Math.random() * emptyCells.length);\n\n      const { rowIndex, colIndex } = emptyCells[emptyCellIndex];\n\n      this.state[rowIndex][colIndex] = number;\n    }\n  }\n\n  columnsToRows(state) {\n    return state.reduce((acc, row) => {\n      row.forEach((cell, i) => {\n        if (!acc[i]) {\n          acc[i] = [];\n        }\n\n        acc[i].push(cell);\n      });\n\n      return acc;\n    }, []);\n  }\n\n  reverseRows(state) {\n    return state.map((row) => [...row].reverse());\n  }\n\n  updateRow(row) {\n    const filteredCells = row.filter((cell) => cell);\n\n    for (let i = 0; i < filteredCells.length - 1; i++) {\n      const currentCell = filteredCells[i];\n      const nextCell = filteredCells[i + 1];\n\n      if (currentCell === nextCell) {\n        const count = currentCell * 2;\n\n        filteredCells[i] = count;\n        filteredCells.splice(i + 1, 1);\n        this.score += count;\n      }\n    }\n\n    while (filteredCells.length < this.gameSize) {\n      filteredCells.push(0);\n    }\n\n    return filteredCells;\n  }\n\n  canMoveRow(row) {\n    return row.some((cell, index) => cell === row[index + 1]);\n  }\n\n  shouldMove(currentState, newState) {\n    return newState.some((row, rowIndex) => {\n      return row.some((cell, colIndex) => {\n        return cell !== currentState[rowIndex][colIndex];\n      });\n    });\n  }\n\n  canMove() {\n    return (\n      this.state.some((row) => this.canMoveRow(row)) ||\n      this.columnsToRows(this.state).some((row) => this.canMoveRow(row))\n    );\n  }\n\n  updateGameStatus() {\n    const isWinGame = this.state.some((row) => row.includes(Game.WIN_COUNT));\n\n    if (isWinGame) {\n      this.status = Game.STATUS.win;\n    }\n\n    if (!this.canMove()) {\n      this.status = Game.STATUS.lose;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","STATUS","idle","playing","win","lose","DIRECTION","left","right","up","down","INITIAL_STATE","WIN_COUNT","constructor","initialState","state","JSON","parse","stringify","score","status","gameSize","length","moveLeft","move","moveRight","moveUp","moveDown","getScore","getState","getStatus","start","addTile","restart","direction","newState","map","row","updateRow","reverseRows","columnsToRows","shouldMove","updateGameStatus","getEmptyCells","reduce","acc","rowIndex","forEach","cell","colIndex","push","emptyCells","emptyCellIndex","Math","floor","random","i","reverse","filteredCells","filter","currentCell","count","splice","canMoveRow","some","index","currentState","canMove","includes","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$board","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$stopGame","removeEventListener","$09e991522ca7e64e$var$onMove","e","preventDefault","key","$09e991522ca7e64e$var$renderBoard","$09e991522ca7e64e$var$manageMessage","line","tr","createElement","classList","add","item","td","textContent","appendChild","replaceChild","rows","toString","remove","addEventListener","toggle"],"version":3,"file":"index.8dbf3569.js.map"}